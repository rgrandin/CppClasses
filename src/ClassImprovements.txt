This file contains a copy of the code added to ArrayBase to satisfy the "Rule of 3 (or 5)".
Copying this functionality to other classes is needed, and the code here should make the
updating of other classes easier.





Header Code
===========





/**
 * @brief Copy constructor.
 * @param a Reference to existing ArrayBase object to be copied.
 */
ArrayBase(ArrayBase<T> &a);


/**
 * @brief Move constructor (C++11).
 * @param a Reference to existing ArrayBase object to be copied.
 * @warning This function requires C++11 compiler support.
 */
ArrayBase(ArrayBase<T> &&a);


/**
 * @brief Copy-assignment operator.
 * @param a Reference to ArrayBase object being assigned.
 * @return Pointer to instance of ArrayBase.
 */
ArrayBase& operator=(const ArrayBase<T> &a);


/**
 * @brief Move-assignment operator (C++11).
 * @param a Reference to ArrayBase object being assigned.
 * @return Pointer to instance of ArrayBase.
 * @warning This function requires C++11 compiler support.
 */
ArrayBase& operator=(const ArrayBase<T> &&a);


/**
 * @brief ArrayBaseSwap swaps member information between two ArrayBase objects.
 * @param first First ArrayBase object.
 * @param second Second ArrayBase object.
 */
friend void ArrayBaseSwap(ArrayBase<T> &first, ArrayBase<T> &second)
{
    std::swap(first.npoints, second.npoints);
    std::swap(first.array, second.array);
}







Source Code
===========





template <class T>
ArrayBase<T>::ArrayBase(ArrayBase<T> &a) : ArrayBase()
{
    ArrayBaseSwap(*this, a);
}


template <class T>
ArrayBase<T>::ArrayBase(ArrayBase<T> &&a) : ArrayBase()
{
    ArrayBaseSwap(*this, a);
}


template <class T>
ArrayBase<T>& ArrayBase<T>::operator=(const ArrayBase<T> &a)
{
    ArrayBaseSwap(*this, a);
    return *this;
}


template <class T>
ArrayBase<T>& ArrayBase<T>::operator=(const ArrayBase<T> &&a)
{
    ArrayBaseSwap(*this, a);
    return *this;
}
